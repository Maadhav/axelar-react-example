"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./hooks/useAxelar.js":
/*!****************************!*\
  !*** ./hooks/useAxelar.js ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @axelar-network/axelarjs-sdk */ \"./node_modules/@axelar-network/axelarjs-sdk/dist/src/index.js\");\n/* harmony import */ var _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _abis_usdc_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../abis/usdc.json */ \"./abis/usdc.json\");\n/* harmony import */ var _abis_fvm_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../abis/fvm.json */ \"./abis/fvm.json\");\n/* harmony import */ var _abis_eth_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../abis/eth.json */ \"./abis/eth.json\");\n\n\n\n\n\nconst FVM_USDC_ADDRESS = \"0x40721AE051B1D20c12038d7c408454B3Ca310Ea1\";\nconst FVM_CONTRACT_ADDRESS = \"0xb7ff4e2dbe970f94ca08083db9cb073266e3c357\";\nconst ETH_USDC_ADDRESS = \"0x220BdcCa5adA47b0c7d2723355161611411Bd834\";\nconst ETH_CONTRACT_ADDRESS = \"0x0aC2C6391264Fb640266567E17F1A6fE4242e1D5\";\nconst api = new _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__.AxelarQueryAPI({\n    environment: _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__.Environment.TESTNET\n});\nconst sdk = new _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__.AxelarGMPRecoveryAPI({\n    environment: _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__.Environment.TESTNET\n});\nasync function waitForTransaction(provider, txnHash) {\n    let receipt = await provider.waitForTransaction(txnHash, 1);\n    return receipt;\n}\nconst useAxelar = ()=>{\n    const execute = async ()=>{\n        var _txStatus_gasPaidInfo;\n        const ethereum = window.ethereum;\n        ethereum.request({\n            method: \"eth_requestAccounts\",\n            params: []\n        });\n        try {\n            await ethereum.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: \"0xc45\"\n                    }\n                ]\n            });\n        } catch (switchError) {\n            // This error code indicates that the chain has not been added to MetaMask.\n            if (switchError.code === 4902) {\n                try {\n                    await ethereum.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: \"0xc45\",\n                                chainName: \"Filecoin - Hyperspace testnet\",\n                                rpcUrls: [\n                                    \"https://filecoin-hyperspace.chainup.net/rpc/v1\"\n                                ]\n                            }\n                        ]\n                    });\n                } catch (addError) {\n                    console.log(addError);\n                }\n            }\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        // initialize contracts using address and ABI\n        const fvmUSDC = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.Contract(FVM_USDC_ADDRESS, _abis_usdc_json__WEBPACK_IMPORTED_MODULE_1__, signer);\n        const fvmContract = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.Contract(FVM_CONTRACT_ADDRESS, _abis_fvm_json__WEBPACK_IMPORTED_MODULE_2__, signer);\n        // set the recipient address\n        const reciever = await signer.getAddress();\n        // set the amount of USDC to send\n        const amount = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseUnits(\"1\", 6);\n        // STEP 1: Allow the FVM contract to spend USDC on your behalf\n        const fvmUSDCWithSigner = fvmUSDC.connect(signer);\n        const approveTx = await fvmUSDCWithSigner.approve(FVM_CONTRACT_ADDRESS, amount);\n        const approveTxReceipt = await waitForTransaction(provider, approveTx.hash);\n        console.log(\"ApproveTxReceipt: \", approveTxReceipt);\n        // STEP 2: Call the FVM contract to send USDC to the Axelar network\n        const fee = await api.estimateGasFee(_axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__.CHAINS.TESTNET.FILECOIN, _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__.CHAINS.TESTNET.ETHEREUM, \"aUSDC\", undefined, 1.1);\n        console.log(\"Fee: \", fee);\n        const fvmContractWithSigner = fvmContract.connect(signer);\n        const sendTx = await fvmContractWithSigner.send(ETH_CONTRACT_ADDRESS, reciever, amount, {\n            value: fee\n        });\n        const sendTxReceipt = await waitForTransaction(provider, sendTx.hash);\n        console.log(\"SendTxReceipt: \", sendTxReceipt);\n        // STEP 3: Query the Axelar network for the transaction status\n        console.log(\"View Status At: https://testnet.axelarscan.io/gmp/\" + sendTx.hash);\n        let txStatus = await sdk.queryTransactionStatus(sendTx.hash);\n        while(txStatus.status !== _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__.GMPStatus.DEST_EXECUTED){\n            var _txStatus_gasPaidInfo1;\n            var _txStatus_gasPaidInfo_status;\n            console.log(\"Tx Status: \", txStatus.status, \"\\nGas Status: \", (_txStatus_gasPaidInfo_status = (_txStatus_gasPaidInfo1 = txStatus.gasPaidInfo) === null || _txStatus_gasPaidInfo1 === void 0 ? void 0 : _txStatus_gasPaidInfo1.status) !== null && _txStatus_gasPaidInfo_status !== void 0 ? _txStatus_gasPaidInfo_status : _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__.GasPaidStatus.GAS_UNPAID);\n            txStatus = await sdk.queryTransactionStatus(sendTx.hash);\n            if (txStatus.error) {\n                console.error(\"Error: \", txStatus.error);\n                break;\n            }\n        }\n        var _txStatus_gasPaidInfo_status1;\n        console.log(\"Tx Status: \", txStatus.status, \"\\nGas Status: \", (_txStatus_gasPaidInfo_status1 = (_txStatus_gasPaidInfo = txStatus.gasPaidInfo) === null || _txStatus_gasPaidInfo === void 0 ? void 0 : _txStatus_gasPaidInfo.status) !== null && _txStatus_gasPaidInfo_status1 !== void 0 ? _txStatus_gasPaidInfo_status1 : _axelar_network_axelarjs_sdk__WEBPACK_IMPORTED_MODULE_0__.GasPaidStatus.GAS_UNPAID);\n        console.log(\"Bidging Completed: https://goerli.etherscan.io/tx/\" + txStatus.executed.transactionHash);\n    };\n    return {\n        execute\n    };\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (useAxelar);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useAxelar.js\n"));

/***/ })

});